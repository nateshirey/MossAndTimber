// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// Released under the GPLv3 license to match the rest of the
// Adafruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
#define PIN        6 
#define buttonPin  2

//paste colors here
uint8_t reds [] = {14,15,17,19,21,23,25,27,29,30,32,34,36,38,40,42,43,45,47,49,51,53,55,56,58,60,62,64,66,68,69,71,73,75,77,79,81,83,84,86,88,90,92,94,96,97,99,101,103,105,107,109,110,112,114,116,118,120,122,124,125,127,129,131,133,135,137,138,140,142,144,146,148,150,151,153,155,157,159,161,163,164,166,168,170,172,174,176,178,179,181,183,185,187,189,191,192,194,196,198,200,202,204,205,207,209,211,213,215,217,219,220,222,224,226,228,230,232,233,235,237,239,241,243,245,246,248,254,252,250,248,246,244,242,241,239,237,235,233,231,229,228,226,224,222,220,218,216,215,213,211,209,207,205,203,202,200,198,196,194,192,190,188,187,185,183,181,179,177,175,174,172,170,168,166,164,162,161,159,157,155,153,151,149,148,146,144,142,140,138,136,134,133,131,129,127,125,123,121,120,118,116,114,112,110,108,107,105,103,101,99,97,95,93,92,90,88,86,84,82,80,79,77,75,73,71,69,67,66,64,62,60,58,56,54,53,51,49,47,45,43,41,39,38,36,34,32,30,28,26,25,23,21,19,17,15,13,12,10,8,6,13,15,17,19,21,22,24,26,28,30,32,34,36,37,39,41,43,45,47,49,50,52,54,56,58,60,62,63,65,67,69,71,73,75,76,78,80,82,84,86,88,90,91,93,95,97,99,101,103,104,106,108,110,112,114,116,117,119,121,123,125,127,129,131,132,134,136,138,140,142,144,145,147,149,151,153,155,157,158,160,162,164,166,168,170,171,173,175,177,179,181,183,185,186,188,190,192,194,196,198,199,201,203,205,207,209,211,212,214,216,218,220,222,224,226,227,229,231,233,235,237,239,240,242,244,246,248,253,251,250,248,246,244,242,240,238,236,235,233,231,229,227,225,223,222,220,218,216,214,212,210,209,207,205,203,201,199,197,195,194,192,190,188,186,184,182,181,179,177,175,173,171,169,168,166,164,162,160,158,156,155,153,151,149,147,145,143,141,140,138,136,134,132,130,128,127,125,123,121,119,117,115,114,112,110,108,106,104,102,100,99,97,95,93,91,89,87,86,84,82,80,78,76,74,73,71,69,67,65,63,61,60,58,56,54,52,50,48,46,45,43,41,39,37,35,33,32,30,28,26,24,22,20,19,17,15,13,11,9,7,5,13,15,16,18,20,22,24,26,28,29,31,33,35,37,39,41,43,44,46,48,50,52,54,56,57,59,61,63,65,67,69,70,72,74,76,78,80,82,84,85,87,89,91,93,95,97,98,100,102,104,106,108,110,111,113,115,117,119,121,123,124,126,128,130,132,134,136,138,139,141,143,145,147,149,151,152,154,156,158,160,162,164,165,167,169,171,173,175,177,179,180,182,184,186,188,190,192,193,195,197,199,201,203,205,206,208,210,212,214,216,218,219,221,223,225,227,229,231,233,234,236,238,240,242,244,246,247,253,251,249,247,245,243,242,240,238,236,234,232,230,229,227,225,223,221,219,217,216,214,212,210,208,206,204,202,201,199,197,195,193,191,189,188,186,184,182,180,178,176,175,173,171,169,167,165,163,162,160,158,156,154,152,150,148,147,145,143,141,139,137,135,134,132,130,128,126,124,122,121,119,117,115,113,111,109,107,106,104,102,100,98,96,94,93,91,89,87,85,83,81,80,78,76,74,72,70,68,67,65,63,61,59,57,55,53,52,50,48,46,44,42,40,39,37,35,33,31,29,27,26,24,22,20,18,16,14,13,11,9,7,5,12,14,16,18,20,22,23,25,27,29,31,33,35,36,38,40,42,44,46,48,50,51,53,55,57,59,61,63,64,66,68,70,72,74,76,77,79,81,83,85,87,89,91,92,94,96,98,100,102,104,105,107,109,111,113,115,117,118,120,122,124,126,128,130,131,133,135,137,139,141,143,145,146,148,150,152,154,156,158,159,161,163,165,167,169,171,172,174,176,178,180,182,184,186,187,189,191,193,195,197,199,200,202,204,206,208,210,212,213,215,217,219,221,223,225,226,228,230,232,234,236,238,240,241,243,245,247,252,250,249,247,245,243,241,239,237,236,234,232,230,228,226,224,223,221,219,217,215,213,211,210,208,206,204,202,200,198,196,195,193,191,189,187,185,183,182,180,178,176,174,172,170,169,167,165,163,161,159,157,155,154,152,150,148,146,144,142,141,139,137,135,133,131,129,128,126,124,122,120,118,116,115,113,111,109,107,105,103,101,100,98,96,94,92,90,88,87,85,83,81,79,77,75,74,72,70,68,66,64,62,60,59,57,55,53,51,49,47,46,44,42,40,38,36,34,33,31,29,27,25,23,21,20,18,16,14,12,10,8,6,5};
uint8_t greens [] = {};
uint8_t blues [] = {};

//end paste block

//long strands have 134 pixels, short strands have 127
#define lightsNum 1043

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals.
Adafruit_NeoPixel pixels(lightsNum, PIN, NEO_GRB + NEO_KHZ800);

long timer = 0;
long luminance = 0;
long animSpeed = 2;
bool canToggle = false;

int currentState = 0;

//set max state to the state int that is greatest to loop back to default
const int maxState = 1;
const int defaultState = 0;
const int northernLightsState = 1;

uint32_t defaultColor = pixels.Color(255, 0, 0);

void setup() {
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.show();
  pinMode(buttonPin, INPUT_PULLUP);

}

bool HandleButton(int sensorValue){
  
  if(canToggle && sensorValue == 0){
    return true;
  }
  else{
    return false;
  }
}

void Count(){
  
  timer += animSpeed;
  if(timer > 255){
    timer = 0;
  }
}

//this is used for actually changing state
void SetState(int state){
  currentState = state;
}

//this is called every update to pick which 
//action to perform based on the current state
void HandleState(){
  switch(currentState){
    case northernLightsState:
      NorthernLightsAction();
      break;
    default:
      DefaultAction();
      break;
  }
}

void DefaultAction(){
  for(int i=0; i<lightsNum; i++){
    pixels.setPixelColor(i, defaultColor);
  }
}

void NorthernLightsAction(){
  
  luminance += animSpeed * 0.5;
  if(luminance > 255){
    luminance = 0;
  }
  
  for(int i=0; i<lightsNum; i++) { // For each pixel...
    uint8_t greenBrightness = reds[i] + timer;
    if(greenBrightness > 255){
      greenBrightness = greenBrightness - 255;
    }
    if(greenBrightness < 235){
      greenBrightness = 0;
    }
    greenBrightness *= greens[i];

    uint8_t blueBrightness = reds[i] + (timer * 1.3);
    if(blueBrightness > 255){
      blueBrightness = blueBrightness - 255;
    }
    if(blueBrightness < 235){
      blueBrightness = 0;
    }
    blueBrightness *= blues[i];

    if(blueBrightness > 30 || greenBrightness > 30){
      uint32_t color = pixels.Color(0, greenBrightness, blueBrightness * luminance);
      pixels.setPixelColor(i, color);
    }
    else{
      uint32_t color = pixels.Color(20, 0, 40);
      pixels.setPixelColor(i, color);
    }
  }
}

void loop() {

  Count();
  int buttonVal = digitalRead(buttonPin);
  
  if(HandleButton(buttonVal)){
    
    if(currentState + 1 > maxState){
      currentState = 0;
      SetState(currentState);
    }
    else{
      SetState(currentState + 1);
    }
  }
  
  if(buttonVal == 1){
    canToggle = true;
  }
  else{
    canToggle = false;
  }

  HandleState();
  pixels.show();   // Send the updated pixel colors to the hardware.
}
